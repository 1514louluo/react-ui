webpackJsonp_name_([29],{3:function(e,t,l){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.__esModule=!0;var o=l(1),c=n(o),i=l(5),d=function(e){function t(){return a(this,t),r(this,e.apply(this,arguments))}return u(t,e),t.prototype.componentDidMount=function(){window.prettyPrint(null,(0,i.findDOMNode)(this.code))},t.prototype.render=function(){var e=this.props.children.split("\n").filter(function(e){return e.length>0}),t=e[0]?/^(\s*)/.exec(e[0])[1].length:0,l=new RegExp("^(\\s{"+t+"})");return e=e.map(function(e){return e.replace(l,"")}),c.default.createElement("div",{className:"code"},c.default.createElement("pre",{className:"prettyprint"},e.join("\n")))},t}(o.Component);d.propTypes={children:o.PropTypes.string},d.defaultProps={children:""},t.default=d},4:function(e,t,l){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}var a=l(1),r=n(a),u=l(2),o=n(u),c=function(e){return r.default.createElement("div",{className:(0,o.default)("docs-example",e.className)},e.children)};c.propTypes={children:a.PropTypes.any,className:a.PropTypes.string},e.exports=c},144:function(e,t,l){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var o=l(1),c=n(o),i=l(3),d=n(i),m=l(4),f=n(m),s=l(9),p=l(10);e.exports=function(e){function t(){return a(this,t),r(this,e.apply(this,arguments))}return u(t,e),t.prototype.renderExample=function(e,t){return t=t||"Input",c.default.createElement("div",null,c.default.createElement("p",null,c.default.createElement("em",null,c.default.createElement("b",null,e))," => ",c.default.createElement("a",{href:"#/"+t.toLowerCase()},t)),c.default.createElement("div",null,c.default.createElement(s.FormControl,{grid:{width:.25},type:e})),c.default.createElement(d.default,null,'<FormControl grid={{width: 1/4}} type="'+e+'" />'))},t.prototype.render=function(){return c.default.createElement("div",null,c.default.createElement("div",{className:"header"},c.default.createElement("h1",null,"FormControl"),c.default.createElement(p.Cn,{tag:"h2"},"表单区块")),c.default.createElement("div",{className:"content pure-form"},c.default.createElement(p.Cn,null,"表单中一个横行的区块，包含label提示，输入提示等等。如果一个区块只有一个FormItem，可以直接传入FormItem的props。"),c.default.createElement(p.Cn,null,c.default.createElement(d.default,null,'<FormControl\n  className="string"\n  label={string|element}  // 提示文字\n  name={string}           // 数据key名称，唯一\n  ignore={bool}           // 为true时，不提交该项数据，默认为 false\n  type={string}           // 控件注册名\n  grid={{width, offset, responsive}} // 宽度，详见Grid\n  {...validate}           // 数据验证\n  {...props}              // 控件属性\n>\n  {children}              // 表单组件\n</FormControl>\n  ')),c.default.createElement(p.En,null,c.default.createElement(d.default,null,'<FormControl\n  className="string"\n  label={string|element}\n  name={string}           // input name, unique\n  ignore={bool}           // if ignore is true, form data will ignore this filed, default is false\n  type={string}           // FormItem type\n  grid={{width, offset, responsive}} // see Grid\n  {...validate}\n  {...props}\n>\n  {children}              // FormItem\n</FormControl>\n  ')),c.default.createElement("h2",{className:"subhead"},"validate props"),c.default.createElement(p.Cn,null,c.default.createElement("em",null,"FormControl")," 会根据这些属性自动验证输入，自动生成提示文字和错误信息，文字在 ",c.default.createElement("a",{href:"#/lang"},"Lang")," 中设置。"),c.default.createElement(p.Cn,null,c.default.createElement(d.default,null,"<FormControl\n  min={int}       // 值类型为 string 时，最小长度；为 number 时，最小值；为 array 时，最少选项数\n  max={int}       // 值类型为 string 时，最大长度；为 number 时，最大值；为 array 时，最多选项数\n  required={bool} // 是否必填，默认为 false\n  tip={string}    // 额外提示信息，如果设置，会替换自动生成提示信息\n  type={string}   // 自动验证以下type: email,integer,number,alpha,alphanum,tel,url\n  validator       // 自定义校验\n/>\nvalidator = {\n  func: (value, form), // 指定一个方法校验。value为当前选中值，form为整个form表单数据\n  reg: {string},       // 指定一个正则表达式，和func 二选一\n  bind: [string]       // 当form内其他控件数据变化时，触发校验，参数为控件name\n}")),c.default.createElement(p.En,null,c.default.createElement(d.default,null,"<FormControl\n  min={int}       // if value type is 'string' or 'array', value length must great than min; if value type if 'number', value must great than min;\n  max={int}       // if value type is 'string' or 'array', value length must less than max; if value type if 'number', value must less than max;\n  required={bool} // default is false\n  tip={string}    // if tip is undefined, use generated text\n  type={string}   // email,integer,number,alpha,alphanum,tel,url\n  validator       // custom validator\n/>\n// =========================\nvalidator = {\n  func: (value, formData), // custom validate function\n  reg: {string},           // if func set, reg will be ignored\n  bind: ['name']           // bind other FormItem with 'name' in the same Form, if the FormItem value changed, execute this validate\n}")),c.default.createElement("h2",{className:"subhead"},"registered FormItem"),c.default.createElement("div",null,c.default.createElement("p",null,c.default.createElement("em",null,c.default.createElement("b",null,"text"))," => ",c.default.createElement("a",{href:"#/input"},"Input")),c.default.createElement(f.default,null,c.default.createElement(s.FormControl,{required:!0,grid:{width:.25},type:"text",min:2,max:10})),c.default.createElement(d.default,null,'              <FormControl required grid={{width: 1 / 4}} type="text" min={2} max={10} />')),this.renderExample("email"),this.renderExample("alpha"),this.renderExample("alphanum"),this.renderExample("url"),this.renderExample("integer"),this.renderExample("number"),this.renderExample("password"),this.renderExample("date","Datepicker"),this.renderExample("time","Datepicker"),this.renderExample("datetime","Datepicker"),c.default.createElement("div",null,c.default.createElement("p",null,c.default.createElement("em",null,c.default.createElement("b",null,"textarea"))," => ",c.default.createElement("a",{href:"#/input"},"Input")),c.default.createElement(f.default,null,c.default.createElement(s.FormControl,{type:"textarea",rows:5})),c.default.createElement(d.default,null,'              <FormControl type="textarea" rows={5} />')),c.default.createElement("div",null,c.default.createElement("p",null,c.default.createElement("em",null,c.default.createElement("b",null,"select"))," => ",c.default.createElement("a",{href:"#/select"},"Select")),c.default.createElement(f.default,null,c.default.createElement(s.FormControl,{type:"select",required:!0,fetch:{url:"json/countries.json",cache:3600},filterAble:!0,optionTpl:'<img src="//lobos.github.io/react-ui/images/flags/{code}.png" /> {country}-{en}',valueTpl:"{country}-{en}",mult:!0,min:2,max:6})),c.default.createElement(d.default,null,'              <FormControl\n                type="select"\n                required\n                fetch={{ url: \'json/countries.json\', cache: 3600 }}\n                filterAble\n                optionTpl=\'<img src="//lobos.github.io/react-ui/images/flags/{code}.png" /> {country}-{en}\'\n                valueTpl="{country}-{en}"\n                mult\n                min={2}\n                max={6}\n               />')),c.default.createElement("div",null,c.default.createElement("p",null,c.default.createElement("em",null,c.default.createElement("b",null,"tree"))," => ",c.default.createElement("a",{href:"#/tree"},"Tree")),c.default.createElement(f.default,null,c.default.createElement(s.FormControl,{type:"tree",checkAble:!0,fetch:{url:"json/tree.json",cache:3600},textTpl:"{text}({id})",valueTpl:"{id}"})),c.default.createElement(d.default,null,'              <FormControl\n                type="tree"\n                checkAble\n                fetch={{ url: \'json/tree.json\', cache: 3600 }}\n                textTpl="{text}({id})"\n                valueTpl="{id}"\n               />')),c.default.createElement("div",null,c.default.createElement("p",null,c.default.createElement("em",null,c.default.createElement("b",null,"checkbox"))," => ",c.default.createElement("a",{href:"#/checkbox"},"Checkbox")),c.default.createElement(f.default,null,c.default.createElement(s.FormControl,{type:"checkbox",text:"I'm a checkbox"})),c.default.createElement(d.default,null,'              <FormControl type="checkbox" text="I\'m a checkbox" />')),c.default.createElement("div",null,c.default.createElement("p",null,c.default.createElement("em",null,c.default.createElement("b",null,"checkbox-group"))," => ",c.default.createElement("a",{href:"#/checkbox-group"},"CheckboxGroup")),c.default.createElement(f.default,null,c.default.createElement(s.FormControl,{type:"checkbox-group",fetch:{url:"json/text-value.json",cache:3600},textTpl:"{text}",valueTpl:"{id}",min:2,max:4})),c.default.createElement(d.default,null,'              <FormControl\n                type="checkbox-group"\n                fetch={{ url: \'json/text-value.json\', cache: 3600 }}\n                textTpl="{text}"\n                valueTpl="{id}"\n                min={2}\n                max={4}\n               />')),c.default.createElement("div",null,c.default.createElement("p",null,c.default.createElement("em",null,c.default.createElement("b",null,"radio-group"))," => ",c.default.createElement("a",{href:"#/radio-group"},"RadioGroup")),c.default.createElement(f.default,null,c.default.createElement(s.FormControl,{type:"radio-group",fetch:{url:"json/text-value.json",cache:3600},textTpl:"{text}",valueTpl:"{id}"})),c.default.createElement(d.default,null,'              <FormControl\n                type="radio-group"\n                fetch={{ url: \'json/text-value.json\', cache: 3600 }}\n                textTpl="{text}"\n                valueTpl="{id}"\n               />')),c.default.createElement("div",null,c.default.createElement("p",null,c.default.createElement("em",null,c.default.createElement("b",null,"rating"))," => ",c.default.createElement("a",{href:"#/rating"},"Rating")),c.default.createElement(f.default,null,c.default.createElement(s.FormControl,{type:"rating",maxValue:10,tip:"亲，给个好评吧",required:!0,icons:[c.default.createElement(s.Icon,{key:0,icon:"favorite-outline",style:{color:"red"}}),c.default.createElement(s.Icon,{key:1,icon:"favorite",style:{color:"red"}})]})),c.default.createElement(d.default,null,'              <FormControl\n                type="rating"\n                maxValue={10}\n                tip="亲，给个好评吧"\n                required\n                icons={[<Icon key={0} icon="favorite-outline" style={{color: \'red\'}} />, <Icon key={1} icon="favorite" style={{color: \'red\'}} />]}\n               />')),c.default.createElement("div",null,c.default.createElement("p",null,c.default.createElement("em",null,c.default.createElement("b",null,"upload"))," => ",c.default.createElement("a",{href:"#/upload"},"Upload")),c.default.createElement(f.default,null,c.default.createElement(s.FormControl,{type:"upload",grid:{width:1},name:"test",action:"/upload",accept:"image/*",limit:3,content:c.default.createElement(s.Button,null,c.default.createElement(s.Icon,{icon:"upload"})," Choose a file")})),c.default.createElement(d.default,null,'              <FormControl\n                type="upload"\n                grid={{ width: 1 }}\n                name="test"\n                action="/upload"\n                accept="image/*"\n                limit={3}\n                content={<Button><Icon icon="upload" /> Choose a file</Button>} />')),c.default.createElement("div",null,c.default.createElement("p",null,c.default.createElement("em",null,c.default.createElement("b",null,"upload"))," => ",c.default.createElement("a",{href:"#/upload"},"Upload")),c.default.createElement(f.default,null,c.default.createElement(s.FormControl,{type:"text",grid:{width:1},name:"ajax",tip:"name is 'lobos'",validator:{async:function(e,t,l){setTimeout(function(){l("lobos"===e||new Error(e+" already exists"))},500)}}})),c.default.createElement(d.default,null,"              <FormControl\n                type=\"text\"\n                grid={{ width: 1 }}\n                name=\"ajax\"\n                tip=\"name is 'lobos'\"\n                validator={{\n                  async: (value, formData, callback) => {\n                    setTimeout(() => {\n                      callback(value === 'lobos' ? true : new Error(value + ' already exists'))\n                    }, 500)\n                    /* ajax example\n                    Refetch.get('/validate', { name: value }).then(res => {\n                      callback(res.success ? true : new Error(res.msg))\n                    })\n                    */\n                  }\n                }}\n              />")),c.default.createElement("h2",{className:"subhead"},"Children"),c.default.createElement(p.Cn,null,"0.6 可以任意使用已注册的表单组件"),c.default.createElement(f.default,null,c.default.createElement(s.FormControl,{label:"two items"},c.default.createElement(s.Datepicker,{type:"date",min:"2016-1-22",required:!0,placeholder:"startTime"}),"-",c.default.createElement(s.Datepicker,{type:"date",max:"2017-1-22",placeholder:"endTime"}))),c.default.createElement(d.default,null,'            <FormControl label="two items">\n              <Datepicker type="date"\n                min="2016-1-22"\n                required\n                placeholder="startTime" />\n              -\n              <Datepicker type="date"\n                max="2017-1-22"\n                placeholder="endTime" />\n            </FormControl>')))},t}(c.default.Component)}});