webpackJsonp_name_([28],{3:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.__esModule=!0;var u=n(1),i=r(u),m=n(5),s=function(e){function t(){return a(this,t),l(this,e.apply(this,arguments))}return o(t,e),t.prototype.componentDidMount=function(){window.prettyPrint(null,(0,m.findDOMNode)(this.code))},t.prototype.render=function(){var e=this.props.children.split("\n").filter(function(e){return e.length>0}),t=e[0]?/^(\s*)/.exec(e[0])[1].length:0,n=new RegExp("^(\\s{"+t+"})");return e=e.map(function(e){return e.replace(n,"")}),i.default.createElement("div",{className:"code"},i.default.createElement("pre",{className:"prettyprint"},e.join("\n")))},t}(u.Component);s.propTypes={children:u.PropTypes.string},s.defaultProps={children:""},t.default=s},4:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var a=n(1),l=r(a),o=n(2),u=r(o),i=function(e){return l.default.createElement("div",{className:(0,u.default)("docs-example",e.className)},e.children)};i.propTypes={children:a.PropTypes.any,className:a.PropTypes.string},e.exports=i},145:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var a=n(1),l=r(a),o=n(3),u=r(o),i=n(4),m=r(i),s=n(9),c=n(10);e.exports=function(){return l.default.createElement("div",null,l.default.createElement("div",{className:"header"},l.default.createElement("h1",null,"FormItem"),l.default.createElement(c.Cn,{tag:"h2"},"表单元素")),l.default.createElement("div",{className:"content pure-form"},l.default.createElement(c.Cn,null,"一系列表单控件的higherorder component，统一封装用来实现表单数据验证，输入提示等功能。",l.default.createElement("br",null),"ReactUI的所有表单组件都是FormItem组件，一般情况下，不需要直接使用FormItem。",l.default.createElement("br",null),"自己定义的组件如果想要加入Form，实现自动化校验和整体提交数据，有两个方式实现。"),l.default.createElement(c.En,null,"FormItem is a higherorder component, help for validate input value, show tip text or error text. ",l.default.createElement("br",null),"Under normal circumstances, you don't need to use this Component because all form components were registered in FromItem, include Input, Select, Checkbox, CheckboxGroup, Radio, RadioGroup.."),l.default.createElement("h2",{className:"subhead"},"Component"),l.default.createElement(c.Cn,null,"可以直接当作Component，把自定义组件当作children传入。一个FormItem只能接受一个自定义组件，并且这个组件必须实现一个",l.default.createElement("em",null,"onChange(value)"),"事件返回值，接受",l.default.createElement("em",null,"value"),"作为props传入值"),l.default.createElement(c.En,null,"FormItem can use as a Component, only accept an element as child. the element must has onChange and value props like 'input'."),l.default.createElement(c.Cn,null,l.default.createElement(u.default,null,"<FormItem\n  className=\"string\"\n  name={string}           // 字段名，表单内唯一\n  type={string}           // 'email|integer|number|alpha|alphanum|tel|url'\n  min={int}               // 值类型为 string 时，最小长度；为 number 时，最小值；为 array 时，最少选项数\n  max={int}               // 值类型为 string 时，最大长度；为 number 时，最大值；为 array 时，最多选项数\n  required={bool}         // 是否必填，默认为 false\n  dispatch={[name]}       // 联动校验，当前FormItem改变会触发指定name的组件校验\n  tip={string}            // 额外提示信息，如果设置，会替换自动生成提示信息\n  validator={             // 自定义校验\n    func: (value, form), // 指定一个方法校验。value为当前选中值，form为整个form表单数据\n    reg: {string},       // 指定一个正则表达式，和func 二选一\n    async: (value, formData, callback) // 异步校验，callback 返回结果\n  }\n>\n  {element}               // 只能接受一个element\n</FormItem>")),l.default.createElement(c.En,null,l.default.createElement(u.default,null,"<FormItem\n  className=\"string\"\n  name={string}           // filed name, unique in the form\n  type={string}           // 'email|integer|number|alpha|alphanum|tel|url'\n  min={int}               // if value type is 'string' or 'array', value length must great than min; if value type if 'number', value must great than min;\n  max={int}               // if value type is 'string' or 'array', value length must less than max; if value type if 'number', value must less than max;\n  required={bool}         // default is false\n  dispatch={[name]}       // when this value change, dispatch other item (form[name]) validate\n  tip={string}            // tip text, overwrite generated tip text\n  validator={             // custom validation\n    func: (value, form),  // first argument is the filed value, second is the form data\n    reg: {string},        // regular expressions, if func was set, reg will ignore\n    async: (value, formData, callback) //\n  }\n>\n  {element}               // only one element accept\n</FormItem>")),l.default.createElement(m.default,null,l.default.createElement(s.Form,{layout:"aligned",data:{input:"init value"}},l.default.createElement(s.FormControl,{label:"label text"},l.default.createElement(s.FormItem,{required:!0,min:4,max:12,name:"input"},l.default.createElement("input",null))))),l.default.createElement(u.default,null,'<Form layout="aligned" data={{input: \'init value\'}}>\n  <FormControl label="label text">\n    <FormItem required min={4} max={12} name="input">\n      <input />\n    </FormItem>\n  </FormControl>\n</Form>'),l.default.createElement("h2",{className:"subhead"},"register"),l.default.createElement(c.Cn,null,"将自定义组件注册到FormItem，可以通过FormControl的快捷方式调用"),l.default.createElement(c.En,null,"You can registered you component to FormItem, then use FormControl."),l.default.createElement(u.default,null,"import { register } from 'rctui/higherOrders/FormItem';\nregister(\n  types,        // string or array[string], unique\n  options:{\n    valueType,  // 'number|string|array'，default is 'string'\n    render      // special render function, not required\n  },\n  Component     // custom component\n);\n\n// example\nclass MyInput extends React.Component { ... }\n\nregister(\n  ['my-text'],\n  {\n    valueType: 'string',\n    render: function (props) {\n      return <Input someProps=\"xxx\" {...props} />;\n    }\n  },\n  MyInput\n)\n\n<FormControl type=\"my-text\" {...props} />\n")))}}});